package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Position;
import ca.jrvs.apps.trading.model.domain.SecurityOrder;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.domain.TraderAccountView;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

  private TraderDao traderDao;
  private AccountDao accountDao;
  private PositionDao positionDao;
  private SecurityOrderDao securityOrderDao;

  @Autowired
  public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
      PositionDao positionDao, SecurityOrderDao securityOrderDao) {
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.positionDao = positionDao;
    this.securityOrderDao = securityOrderDao;
  }

  /**
   * Create a new trader an initialize a new account with 0 amount.
   * - validate user input (all fields must be non empty)
   * - create trader
   * - create an account
   * - create, setup, and return a new traderAccountView
   *
   * Assumption: to simplify the logic, each trader has only one account where traderId == accountId
   *
   * @param trader cannot be null. All fields cannot be null except for id (auto-generated by db)
   * @return TraderAccountView
   * @throws IllegalArgumentException if a trader has null fields or id is not null.
   */
  public TraderAccountView createTraderAndAccount(Trader trader) {
    if (trader.getCountry() == null || trader.getDob() == null || trader.getEmail() == null ||
        trader.getFirstName() == null || trader.getLastName() == null || trader.getId() != null) {
      throw new IllegalArgumentException("Trader has null fields or ID is not null");
    }

    Trader savedTrader = traderDao.save(trader);
    Account account = new Account();
    account.setTraderId(savedTrader.getId());
    account.setAmount(0d);
    accountDao.save(account);

    TraderAccountView traderAccountView = new TraderAccountView();
    traderAccountView.setTrader(savedTrader);
    traderAccountView.setAccount(account);
    return traderAccountView;
  }

  /**
   * A trader can be deleted iff it has no open position and 0 cash balance
   * - validate traderID
   * - get trader account by traderId and check account balance
   * - get positions by accountId and check positions
   * - delete all securityOrders, account, trader (in this order)
   *
   * @param traderId
   * @throws IllegalArgumentException if tradeId is null or not found or unable to delete
   */
  public void deleteTraderById(Integer traderId) {
    if (traderId == null) {
      throw new IllegalArgumentException("trader ID cannot be null");
    }

    Account account = accountDao.findByTraderId(traderId);
    if (account.getAmount() != 0) {
      throw new IllegalArgumentException("Cannot delete account: account balance is not 0");
    }

    List<Position> positions = positionDao.getPositions(account.getId());
    for (Position position : positions) {
      if (position.getPosition() > 0) {
        throw new IllegalArgumentException("Cannot delete account: there is open position(s)");
      }
    }

    List<SecurityOrder> orders = securityOrderDao.findByAccountId(account.getId());
    for (SecurityOrder order : orders) {
      securityOrderDao.deleteById(order.getId());
    }
    accountDao.deleteById(account.getId());
    traderDao.deleteById(traderId);
  }

  /**
   * Deposit a fund to an account by traderId
   * - validate user input
   * - account = accountDao.findByTraderId
   * - accountDao.updateAmountById
   *
   * @param traderId must not be null
   * @param fund must be greater than 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found,
   * and fund is less than or equal to 0
   */
  public Account deposit(Integer traderId, Double fund) {
    return null;
  }

  /**
   * Withdraw a fund from an account by traderId
   * - validate user input
   * - account = accountDao.findByTraderId
   * - accountDao.updateAmountById
   *
   * @param traderId trader ID
   * @param fund must be greater than 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found,
   * fund is less than or equal to 0, and insufficient fund
   */
  public Account withdraw(Integer traderId, Double fund) {
    return null;
  }
}
